/*
 FCI – Programming 1 – 2022 - Assignment 3.
 Program Name: filters.cpp.
 Last Modification Date: 24 / 4 / 2022.
 Author1: Mina Sobhy
 Author2: George Ashraf .
 Author3: Aya Osama

 Purpose: Create  filters for photos by modification on pixels.
*/
#include <cstring>
#include <fstream>
#include<cmath>
#include "bmplib.cpp"
#include <iostream>
using namespace std;
unsigned char image[SIZE][SIZE];
unsigned char image2[SIZE][SIZE];
unsigned char shuffled[SIZE][SIZE];
void load_screen();
void BlackWhite();
void flipImage();
void detect_image();
void mirrorImage();
void invert();
void merge();
void rotate();
void Darken_Lighten();
void shuffleImage();
void enlarge_image ();
void shrink_image ();
void blur_image();
void moveQuarter(int idx, int i, int j );
void update_screen();
int main() {
    string choice;
    cout << "Ahlan ya user ya habibi ^^" << endl;
    load_screen();
    cout << "Please select the number of the filter to apply: " << endl;//choose the filter to call the exact function.
    cout << "1- Black & White Filter. " << endl;
    cout << "2- Invert image." << endl;
    cout << "3- Merge image." << endl;
    cout << "4- Flip the image. " << endl;
    cout << "5- Rotate the image. " << endl;
    cout << "6- Darken & Lighten the image. " << endl;
    cout << "7- Detect Image Edges. " << endl;
    cout << "8- Enlarge Image. " << endl;
    cout << "9- Shrink Image. " << endl;
    cout << "a- Mirror 1/2 Image.(enter 1/2 lower or 1/2 left or 1/2 upper or 1/2 right) " << endl;
    cout << "b- shuffle filter. " << endl;
    cout << "c- Blur Image. " << endl;
    cout << "0- Save the new image. " << endl;
    for(int i = 0; i <= 13; i++) {
        cout << "Enter your choice please: ";
        cin >> choice;//after he input this we call the function inside the number he choose.
        if (choice == "1") {
            BlackWhite();
            update_screen();
        }
        else if(choice == "2"){
            invert();
            update_screen();
        }
        else if(choice == "3"){
            merge();
            update_screen();
        }
        else if (choice == "4") {
            flipImage();
            update_screen();
        }
        else if(choice == "5"){
            rotate();
            update_screen();
        }
        else if( choice == "6"){
            Darken_Lighten();
            update_screen();
        }
        else if(choice == "7")
        {
            detect_image();
            update_screen();
        }
        else if(choice == "8")
        {
            enlarge_image();
            update_screen();
        }
        else if(choice == "9")
        {
            shrink_image();
            update_screen();
        }
        else if (choice == "a") {
            mirrorImage();
            update_screen();
        }
        else if(choice == "b")
        {
            shuffleImage();
            update_screen();
        }
        else if(choice == "c")
        {
            blur_image();
            update_screen();
        }
        else if(choice == "0"){
            cout << "         Thanks for using \n     our console application ^^\n" << endl;
            break;
        }
        else
            continue;
    }
    return 0;
}
void load_screen()
{
    char image_fn[100];
    cout << "please enter name of the image: ";
    cin >> image_fn;
    strcat(image_fn, ".bmp");
    readGSBMP(image_fn, image);
}

void BlackWhite(){
    for(int i = 0 ; i <= SIZE ; i++ ){
        for(int j = 0; j <= SIZE; j++){
            // nested loop to create 2d array.
            if(image[i][j] <= 127){//check the pixel to know if it tends to black or white.
                image2[i][j] = 0; //if it less than 127, it must be tends to black as black pixel = 0.
            }
            else { image2[i][j] = 255;}//the opposite happen her.
        }
    }
}

void invert()
{

    for (int i = 0; i < 256; i++)
    {
        for (int j = 0; j< 256; j++)
        {
            image[i][j] = 256 - image[i][j];
        }
    }
    for(int i = 0; i <SIZE; i++){
        for(int j = 0; j <SIZE; j++){
            image2[i][j] = image[i][j];
        }
    }
}

void flipImage(){
    string form;
    cout << "Did you want to flip vertically or horizontally: "; //we have to options to be on the photo.
    cin >> form;
    if(form == "vertically") { //if user want to be flipped vertically.
        for (int i = 256; i < SIZE && i > 0; i--) {//to transfer between the first row and the end one. And the same
                                                    //happen with other pixels
            for (int j = 0; j <= SIZE; j++) {//to be changes at rows only but columns will be the same.
                int x = 255 - i;//so that we have already transfer the rows.
                image2[i][j] = image[x][j];//to copy the change at new image.
            }
        }
        for (int i = 0; i <= SIZE; i++) {
            for (int j = 0; j <= SIZE; j++) {//nested loop to read all rows and all columns.
                int x = 256 - i; // to change the columns order for the upper half.
                image2[i][j] = image[x][j];//copy the changes at new image.
            }

        }
    }
    else if(form == "horizontally") {
        for(int i = 0; i < SIZE ; i++){
            for(int j = 256; j < SIZE && j > 0; j--){
                int x = 255 - j;//to make the changes on only columns at the same row.
                image2[i][j] = image[i][x];//this copied the half upper at the half lower and copy the changes at new image.
            }
        }
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                int x = 255 - j;// to make changes on only columns ,too.
                image2[i][j] = image[i][x];//to copy the half lower of the old image at half upper of the new image.
            }

        }
    }
}

void detect_image() {
    for (int i = 0; i <= SIZE; i++) {//nested loop to create 2d array to read image.
        for (int j = 0; j <= SIZE; j++)
        {
            if(
                (image[i][j] - image[i+1][j+1] > 64| image[i][j] - image[i+1][j] > 64
                || image[i][j] - image[i][j + 1] > 64 || image[i][j] - image[i - 1][j] > 64
                || image[i][j] - image[i - 1][j + 1] > 64 || image[i][j] - image[i][j - 1] > 64
                || image[i][j] - image[i + 1][j - 1] > 64 || image[i][j] - image[i - 1][j - 1] > 64))
            {//this if condition check the edge so while the subtraction of the pixel is > the average of the black scale .
             //this means that it's an edge where there is big differnce between the pixel and one of the pixel around it.
                image2[i][j] = 0;//so if true it must be black
            }
            else {
                image2[i][j] = 255;//unless it must be white.
            }

        }
    }

}

void mirrorImage()
{
    string n ;
    cout << "please enter the direction you want to be: ";
    cin.ignore();//to ignore the inputs before it.
    getline(cin, n); // to get all the line user enter.
    if(n == "1/2 lower") { // coding the 1/2 lower image as a mirror.
        for (int i = 0; i <= SIZE; i++) {
            for (int j = 0; j <= SIZE; j++) {//nested loop to read all rows and all columns.
                int x = 256 - i; //this is to copy the half lower of the old image at the half upper of the same image.
                image[i][j] = image[x][j];//to make all changes at only one image.
            }

        }
    }
    else if(n == "1/2 right") { //coding a mirror filter from 1/2 right.
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                int x = 255 - j;//this to copy the half right at the left one at the same image.
                image[i][j] = image[i][x];//the changes at the same image to be as a mirror.
            }

        }
    }
    else if(n == "1/2 upper"){ // coding the mirror filter from 1/2 upper.
        for(int i = 256; i <= SIZE && i > 0; i--){
            for(int j = 0; j <= SIZE; j++){
                int x = 256 - i;//to copy the half upper at the half lower.
                image[i][j] = image[x][j];//the changes at the same image to be as a mirror.
            }
        }
    }
    else if(n == "1/2 left"){ // coding the mirror filter from 1/2 left
        for(int i = 0; i <= SIZE ; i++){
            for(int j = 256; j <= SIZE && j > 0; j--){
                int x = 256 - j;//this to copy the half left at the right one at the same image
                image[i][j] = image[i][x];//the changes at the same image to be as a mirror.
            }
        }
    }
    for(int i = 0; i < SIZE; i++){
        for(int j = 0; j < SIZE; j++){
            image2[i][j] = image[i][j];//to make all that at image2 to make changes be saved.
        }
    }

}

void merge() {
    int k = 0;
    unsigned char image3[256][256];
    char imageFileName2[100];
    cout << "please enter the name of the second image: ";
    cin >> imageFileName2;
    strcat(imageFileName2, ".bmp");
    readGSBMP(imageFileName2, image3);
    for(int i = 0; i < SIZE; i++){
        for(int j = 0; j < SIZE; j++){
            image2[i][j] = image[i][j];
        }
    }
    for (int i = 0; i < 256; i++) {
        for (int j = 0; j < 256; j++) {
            switch (k) {
                case 1:
                    image[i][j] = image3[i][j];
                    k = 0;
                    break;
                case 0:
                    image[i][j] = image3[i][j];
                    k = 1;
                    break;
            }
        }
    }

}

void moveQuarter(int idx, int i, int j )
{
    int k = 0;
    unsigned char image3[256][256];
    int temp = j;
    if (idx==1)
        for (int k=0; k < SIZE/2; i++,k++)
        {
            j = temp;
            for (int z=0; z< SIZE/2; j++,z++)
                image2[i][j]=image[k][z];
        }
    else if (idx==2)
        for (int k = 0; k< SIZE/2; i++,k++)
        {
            j = temp;
            for (int z = SIZE/2; z< SIZE; j++,z++)
                image2[i][j]=image[k][z];
        }
    else if (idx ==3)
        for (int k=  SIZE/2 ; k<SIZE; i++,k++)
        {
            j = temp;
            for (int z=0; z< SIZE/2; j++,z++)
                image2[i][j]=image[k][z];
        }
    else if (idx ==4)
        for (int k =  SIZE/2; k < SIZE; i++,k++)
        {
            j = temp;
            for (int z = SIZE/2; z< SIZE; j++,z++)
                image2[i][j]=image[k][z];
        }
    for(int i = 0; i < 256; i++)
    {
        for(int j = 0; j < 256; j++)
            shuffled[i][j] = image2[i][j];
    }
}

void enlarge_image (){
    int choose8;
    cout<<"Which quarter to enlarge 1, 2, 3 or 4 : ";
    cin>>choose8;
    if(choose8==1){
        for (int i = 0; i < (SIZE/2); i++){
            for (int j =0 ; j <(SIZE/2); j++){
                image[(i*2)][(j*2)]=image[i][j];
                image[(i*2)+1][(j*2)]=image[i][j];
                image[(i*2)][(j*2)+1]=image[i][j];
                image[(i*2)+1][(j*2)+1]=image[i][j];
            }
        }
        for (int i = 0; i < (SIZE); i++){
            for (int j =0 ; j <(SIZE); j++){
                image2[i][j]=image[i][j];
            }
        }
    }
    else if(choose8==2){
        for (int i = 0; i < (SIZE/2); i++){
            for (int j =0 ; j <(SIZE/2); j++){
                image[i*2][j*2]=image[i][j+128];
                image[(i*2)+1][(j*2)]=image[i][j+128];
                image[(i*2)][(j*2)+1]=image[i][j+128];
                image[(i*2)+1][(j*2)+1]=image[i][j+128];
            }
        }
        for (int i = 0; i < (SIZE); i++){
            for (int j =0 ; j <(SIZE); j++){
                image2[i][j]=image[i][j];
            }
        }
    }
    else if(choose8==3){
        for (int i = 0; i < (SIZE/2); i++){
            for (int j =0 ; j <(SIZE/2); j++){
                image[i*2][j*2]=image[i+128][j];
                image[(i*2)+1][(j*2)]=image[i+128][j];
                image[(i*2)][(j*2)+1]=image[i+128][j];
                image[(i*2)+1][(j*2)+1]=image[i+128][j];
            }
        }
        for (int i = 0; i < (SIZE); i++){
            for (int j =0 ; j <(SIZE); j++){
                image[i][j]=image2[i][j];
            }
        }
    }
    else if(choose8==4){
        for (int i = 0; i < (SIZE/2); i++){
            for (int j =0 ; j <(SIZE/2); j++){
                image[i*2][j*2]=image[i+128][j+128];
                image[(i*2)+1][(j*2)]=image[i+128][j+128];
                image[(i*2)][(j*2)+1]=image[i+128][j+128];
                image[(i*2)+1][(j*2)+1]=image[i+128][j+128];
            }
        }
        for (int i = 0; i < (SIZE); i++){
            for (int j =0 ; j <(SIZE); j++){
                image2[i][j]=image[i][j];
            }
        }
    }
    else cout<<"ERROR INVALID CHOOSE";
}

void shuffleImage()
{
    int n ;

    for (int i =0 ; i <4 ; i++)
    {
        cout<<"Enter the order of quarters you want: ";
        cin>>n;
        if (i==0) moveQuarter(n,0,0);
        else if (i==1) moveQuarter(n,0,SIZE/2);
        else if (i==2) moveQuarter(n,SIZE/2,0);
        else if (i==3) moveQuarter(n,SIZE/2,SIZE/2);
    }

}

void shrink_image ()
{
    int answer;
    cout<<"This filter shrink the image dimensions.\nenter(2) 1/2 the original dimensions.\nenter(3) 1/3 the original dimensions.\nenter(4) 1/4 the original dimensions.\n";
    cin>>answer;

    for (int i = 0; i < SIZE; i++){
        for (int j =0 ; j <SIZE; j++){
            image[i/answer][j/answer]=image[i][j];
        }
    }
    for (int i = 0; i < SIZE; i++){
        for (int j =SIZE/answer ; j <SIZE; j++){
            image[i][j]=255;
        }
    }
    for (int i = SIZE/answer; i < SIZE; i++){
        for (int j =0 ; j <SIZE; j++){
            image[i][j]=255;
        }
    }
    for (int i = 0; i < (SIZE); i++){
        for (int j =0 ; j <(SIZE); j++){
            image2[i][j]=image[i][j];
        }
    }
}

void blur_image()
{

    for (int i = 1; i < 255; i++)
    {
        for (int j = 1; j < 255; j++)
        {
            image[i][j] = ((image[i+1][j] + image[i][j+1] + image[i - 1][j] + image[i][j - 1] + image[i][j - 2] + image[i - 2][j] + image[i][j + 2] + image[i + 2][j] ) / 8);
        }
    }
    for(int i = 0; i < SIZE; i++){
        for(int j = 0; j <SIZE; j++){
            image2[i][j] = image[i][j];
        }
    }
}

void rotate()
{
    unsigned char image2[256][256];
    for (int i = 0; i < 256; i++)
    {
        for(int j = 0; j < 256; j++)
        {
            image[j][i] = image[i][j];
        }
    }

    for (int i = 0; i < 256; i++)
    {
        for(int j = 0; j < 256; j++)
        {
            image[i][j] = image[256 - i][j];
        }

    }
    for (int i = 0; i < 256; i++)
    {
        for(int j = 0; j < 256; j++)
        {
            image[256 - i][j] = image[i][j];
        }
    }
    for (int i = 0; i < 256; i++)
    {
        for(int j = 0; j < 256; j++)
        {
            image2[i][j] = image[i][j];
        }
    }

}

void Darken_Lighten()
{
    int answer=0;
    while(answer==0)
    {
        cout<<"plz enter choice \n1-darken effect\n2-lighten effect\n";
        cin>>answer;
        if(answer==1)
        {
            for (int i = 0; i < 256; i++)
            {
                for (int j = 0; j< 256; j++)
                {
                    image[i][j]=image[i][j]/2;
                }
            }
            break ;
        }
        if (answer==2)
        {
            for (int i = 0; i < 256; i++)
            {
                for (int j = 0; j< 256; j++)
                {
                    image[i][j]=image[i][j]*2;
                }
            }
            break ;
        }
        else
        {
            cout<< "invaild answer"<<endl;
        }

    }
    for(int i = 0; i <SIZE; i++){
        for(int j = 0; j < SIZE; j++){
            image2[i][j] = image[i][j];
        }
    }
}

void update_screen(){
    char image_fn[100];
    cout << "enter the new image file name: ";
    cin >> image_fn;
    strcat(image_fn, ".bmp");
    writeGSBMP(image_fn, image2);

}

